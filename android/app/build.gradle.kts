import java.util.Properties
import java.io.FileInputStream

plugins {
    id("com.android.application")
    id("kotlin-android")
    id("dev.flutter.flutter-gradle-plugin")
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ keystore –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ Huawei
val keystoreProperties = Properties()
val keystorePropertiesFile = File(rootProject.projectDir, "key.properties")

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ keystore
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(FileInputStream(keystorePropertiesFile))
}

android {
    ndkVersion = "27.0.12077973"
    namespace = "com.dritstudio.forest_calculator"
    compileSdk = flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    // –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é buildConfig –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BuildConfig –∫–ª–∞—Å—Å–∞
    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–∞–∫–µ—Ç–∞
        applicationId = "com.dritstudio.forest_calculator"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multidex –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        multiDexEnabled = true
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º BuildConfig
        buildConfigField("String", "HMS_APP_ID", "\"${project.findProperty("hms.app_id") ?: "defaultAppId"}\"")
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Huawei AppGallery
    signingConfigs {
        create("release") {
            keyAlias = keystoreProperties.getProperty("keyAlias") ?: "huawei_key"
            keyPassword = keystoreProperties.getProperty("keyPassword") ?: "123456"
            storeFile = keystoreProperties.getProperty("storeFile")?.let { file(it) } ?: file("huawei-keystore.jks")
            storePassword = keystoreProperties.getProperty("storePassword") ?: "123456"
        }
    }

    buildTypes {
        release {
            // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ AAB –¥–ª—è AppGallery
            // signingConfig = signingConfigs.getByName("release")
            
            // –í–ö–õ–Æ–ß–ê–ï–ú –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ProGuard –¥–ª—è HMS SDK
            isMinifyEnabled = true
            isShrinkResources = true
            
            // –ü—Ä–∞–≤–∏–ª–∞ Proguard/R8 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã HMS SDK (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û)
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        
        debug {
            // Debug –∏—Å–ø–æ–ª—å–∑—É–µ—Ç debug –ø–æ–¥–ø–∏—Å—å
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}
dependencies {
    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ multidex –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    implementation("androidx.multidex:multidex:2.0.1")

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ AAR –∏–∑ –ø–∞–ø–∫–∏ libs (–µ—Å–ª–∏ –≤—ã –ø–æ–ª–æ–∂–∏—Ç–µ appupdate/update-sdk —Å—é–¥–∞)
    implementation(fileTree(mapOf(
        "dir" to "libs",
        "include" to listOf("*.aar")
    )))
    
    // üö®üö®üö® HMS Core SDK –î–õ–Ø checkUpdate API - –û–§–ò–¶–ò–ê–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø üö®üö®üö®
    // HUAWEI MODERATION: –≠—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç—Ä–µ–±—É–µ–º—ã–π checkUpdate API
    implementation("com.huawei.hms:base:6.9.0.300")
    implementation("com.huawei.hms:network-common:5.0.10.302")
    implementation("com.huawei.agconnect:agconnect-core:1.9.1.300")
    
    // üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï HMS SDK –î–õ–Ø –ü–û–õ–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–ò checkUpdate API
    implementation("com.huawei.hms:hianalytics:6.9.0.300")
    
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã HMS Ads
    implementation("com.huawei.hms:ads-lite:13.4.77.300")
    implementation("com.huawei.hms:ads-consent:3.4.77.300")
    implementation("com.huawei.hms:ads-vast:3.4.44.303")
    implementation("com.huawei.hms:ads-vast-player:3.4.44.303")
    
    // HMS IAP –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∫—É–ø–∫–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    implementation("com.huawei.hms:iap:6.3.0.300")
    
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: appservice/update –±–µ—Ä—ë–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö AAR (android/app/libs),
    // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ —É–¥–∞–ª—è–µ–º Maven-–≤–µ—Ä—Å–∏–∏
    
    // HMS AppUpdate SDK –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (—Å–º. MainActivity)
    
    // –î–æ–±–∞–≤–ª—è–µ–º Conscrypt –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    implementation("org.conscrypt:conscrypt-android:2.5.2")
    
    // –î–æ–±–∞–≤–ª—è–µ–º Cronet –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å missing classes
    implementation("org.chromium.net:cronet-embedded:76.3809.111")
}

flutter {
    source = "../.."
}

// Optional: Task to pull specific AARs via Gradle and copy them into libs
// Usage: gradlew :app:fetchHmsAars
tasks.register<Copy>("fetchHmsAars") {
    val tmp by lazy { File(buildDir, "tmp/hmsAars") }
    from(provider {
        val cfg = configurations.detachedConfiguration(
            dependencies.create("com.huawei.hms:appupdate:6.11.0.302"),
            dependencies.create("com.huawei.updatesdk:update-sdk:3.1.2.300")
        )
        cfg.isTransitive = false
        cfg.resolve().map { it }
    })
    into(tmp)
    doLast {
        val libsDir = File(projectDir, "libs")
        if (!libsDir.exists()) libsDir.mkdirs()
        tmp.listFiles()?.forEach { f ->
            if (f.name.endsWith(".aar")) {
                f.copyTo(File(libsDir, f.name), overwrite = true)
                println("Copied ${'$'}{f.name} to libs/")
            }
        }
    }
}

// Auto-fetch Huawei update-sdk (tries several versions) before build if not already present.
tasks.register("autoFetchHuaweiUpdateSdk") {
    doLast {
        val libsDir = File(projectDir, "libs")
        if (!libsDir.exists()) libsDir.mkdirs()
        val already = libsDir.listFiles()?.any { it.name.startsWith("update-sdk-") || it.name.startsWith("appupdate-") } ?: false
        if (already) {
            println("[autoFetchHuaweiUpdateSdk] AAR already present, skip.")
            return@doLast
        }
        val versions = listOf("3.1.2.300","3.1.0.300","3.0.2.300","3.0.1.300")
        var fetched = false
        for (v in versions) {
            try {
                println("[autoFetchHuaweiUpdateSdk] Try version $v")
                val cfg = configurations.detachedConfiguration(
                    dependencies.create("com.huawei.updatesdk:update-sdk:$v")
                )
                cfg.isTransitive = false
                val files = cfg.resolve()
                files.forEach { f ->
                    if (f.name.endsWith(".aar")) {
                        f.copyTo(File(libsDir, f.name), overwrite = true)
                        println("[autoFetchHuaweiUpdateSdk] Downloaded ${f.name}")
                        fetched = true
                    }
                }
                if (fetched) break
            } catch (e: Exception) {
                println("[autoFetchHuaweiUpdateSdk] Version $v not found: ${e.message}")
            }
        }
        if (!fetched) {
            println("[autoFetchHuaweiUpdateSdk] No versions fetched. Ensure VPN access to Huawei repos and rebuild.")
        }
    }
}

// Ensure fetch runs before compilation so the AAR is on classpath via fileTree
tasks.matching { it.name == "preBuild" }.configureEach {
    dependsOn("autoFetchHuaweiUpdateSdk")
}
